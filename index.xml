<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on Compiler Design</title><link>https://compiler-s20.github.io/in-service/</link><description>Recent content in Home on Compiler Design</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://compiler-s20.github.io/in-service/index.xml" rel="self" type="application/rss+xml"/><item><title>General information</title><link>https://compiler-s20.github.io/in-service/docs/syllabus/</link><pubDate>Mon, 17 Jun 2019 23:30:31 +0800</pubDate><guid>https://compiler-s20.github.io/in-service/docs/syllabus/</guid><description>Overview This course is intended to explore the principal ideas and techniques of compiler construction. Topics include lexical analysis, syntax analysis including LL and LR parsers, type checking, run-time environments, symbol tables, code generation, and compiler-construction tools.
This course aims to give you a solid foundation in the theory of compiler construction as well as the experience of building a compiler. Much of what you have learned about algorithms and data structures will come to bear as you study and implement the various components of a compiler.</description></item><item><title>Schedule</title><link>https://compiler-s20.github.io/in-service/docs/schedule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://compiler-s20.github.io/in-service/docs/schedule/</guid><description>Week by week schedule Week Lecture Note Readings Projects 1 Course Introduction &amp;amp; Overview Lec0 Ch1 2 Regular and Context-Free Languages Lec1 Ch3 3 Lexical Analysis / Lex - The Lexical-Analyzer Generator Lec2 Lec3 Lec4 Ch3 P1 out 4 Top-Down Parsing Lec5 Lec6 Ch4 5 Buttom-Up Parsing/SpringBreak Lec7 Ch4 P1 due 6 Buttom-Up Parsing Ch4 7 Yacc - The Parser Generator / Syntax-Directed Translation Lec8 Lec9 Ch5 P2 out 8 Syntax-Directed Translation Ch5 9 Midterm Exam 10 Syntax-Directed Translation / Intermediate-Code Generation Lec10 Ch 5/6 P2 due P3 out 11 Intermediate-Code Generation Ch 6 12 Intermediate-Code Generation Ch 6 13 Run-Time Environment Lec11 Ch 7 P3 due P4 out 14 Run-Time Environment/ Code Generation Lec12 Ch 7/8 15 Code Generation / Control-Flow Analysis and Optimizations Lec13 Ch 8/9 16 Control-Flow Analysis and Optimizations Lec14 Ch9 P4 due P5 out 17 Final Exam (7/6) P5 due</description></item><item><title/><link>https://compiler-s20.github.io/in-service/docs/guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://compiler-s20.github.io/in-service/docs/guide/</guid><description>課程導覽 介紹 組織導覽 加入流程 介紹 嗨！歡迎來到游逸平老師開的編譯器課程，我是助教奕安
半年努力後，我們的課程已經跟 Github 高度整合。這樣做的初衷是提高學生的修課體驗，並嘗試與世界技術潮流接軌 除此之外，也翻新了編譯器的作業敘述跟要求，希望大家能度過充實的一學期
在這裡簡單介紹一下為什麼會想使用 Github，給各位同學一個參考
使用 Github 的理由 1. GitHub 網站的穩定性比 E3 高
你可能體驗過作業死線前 1 分鐘交作業 e3 死當不回應，或是在期末考週 e3 壞掉無法瀏覽的慘況。把課程內容跟作業繳交托管到 GitHub 這類主機吞吐量大的企業能大幅提升課程網站穩定性，讓大家能隨時瀏覽相關內容。同時，我們也可以利用 GitHub 提供的 伺服器紀錄 判斷是否有因伺服器下線讓作業無法繳交的情況，斟酌延後作業死線
2. GitHub 當作你的遠端備份
你只需要一個指令就能將程式碼放上 GitHub，讓你能很簡單的備份自己的作業，降低誤刪自己作業檔案的風險
3. 強迫各位使用版本控管
或許各位上大學到現在都沒聽過版本控管，或只是單純沒機會使用。這堂課會讓你使用最低限度的 Git 來練習版本控管。甚至運用 Git 輔助自己未來的專案開發流程
好的，接下來就是這堂課程的所有資源導覽
組織導覽 除了現在看到的網站外，課程還有一個討論版跟放課程資源的版面
成立討論版目的是讓同學針對課程、作業等等內容提出疑問或看法，當然，我們鼓勵你到其他人開的問題中提供資訊，而課程資源則是講義與考古題內容
如果你想看看討論版實際上會是什麼樣子，可以參考去年的討論版來有個大概
除此之外，你的每一份作業都會被放在這個組織之下，預設是不公開的
所以上述內容可以整理成一張簡單圖表：
+ compiler-s20 —— 課程開的 GitHub Organization + discussion —— 討論版 + private-res —— 講義、考古題、接受作業連結 ------ + hw0-&amp;lt;your id&amp;gt; —— 你的所有作業 + hw1-&amp;lt;your id&amp;gt; .</description></item></channel></rss>